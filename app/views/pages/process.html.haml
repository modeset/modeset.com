%article.double
  %section
    :markdown
      # what we offer
      we're not just developers. we want to __understand your business__. we
      want to understand __what it is that is going to make you money__. what are
      your risks, blockers, opportunities, and market advantages? we're here to
      build you a __viable, releasable product__ you can take to customers,
      investors, and shareholders. we're here to help guide your project from
      idea to a __sustainable business__. whether that product is a web
      application, mobile application, social application or purely
      architecture, infrastructure or optimization, we can help. we bring with
      us extensive knowledge and years of experience working with clients from
      small businesses to global multi-national brands.

      # how we work.
      we've collectively spent years operating in environments high in stress, churn, and uncertainty. from those experiences, we've developed a passion for agile methodologies that embrace change instead of fighting it.  mode set's process is designed to take advantage of that passion, and offer our clients maximum flexibility and responsiveness while maintaining high quality and preserving everyone's sanity.

      we operate on a "brain rental" model and charge straight time-and-materials for all work. our minimum billing increment is 1/2 hour, and our rate is __$155 per hour per developer__.

      # we believe in.
      - Transparent and open client relationships
      - Software development as a creative process
      - Short feedback cycles
      - Continuously releasable software
      - Small cross-functional teams
      - Sustainable working schedules
      - Test-driven development
      - Paired programming
      - Continuous reflection and improvement



  %section
    :markdown

      # what to expect

      ## the meet.
      Interested in what we have to offer?  Give us a ring or drop us a line. Coffee, lunch, or a beer - let’s chat and figure out if there’s common ground and an opportunity to make some magic happen. Even if the match doesn't quite work out for a project, we’re always happy to make an introduction or even just shoot the breeze.

      ## the inception.
      Our first step towards a real project is what we call an “inception
      meeting”.  We take somewhere between a few hours and a day to meet with
      your team in person, face-to-face.  We’ll sketch out your needs, desires,
      directions, and pain points, hash out rough goals and tactics, and try to
      wrap our collective brains around a rough scope. We’ll also start to divide
      features into small, independent chunks of work called stories - the common
      language of the project - and organize them into a backlog.  Our hope is
      that both sides will leave this session with a clearer sense of what the
      business priorities are and how they can can be accomplished during an
      engagement. We can also discuss logistics like team size, start date, and
      work location arrangements.

      ## the process.
      We operate in terms of “iterations” - cycles that encompasses the product
      owner (you) prioritizing the highest-value work, the development team (us)
      performing and delivering that work, and the entire team retrospecting on
      what’s been accomplished and where to go next. We work through the backlog
      from the top down, so our developers maximize the value they’re delivering
      via your prioritization of the items in the backlog. At the end of an
      iteration we re-prioritize and discuss the plan of attack for the
      subsequent iteration. This includes refining the stories in the backlog,
      generating new stories based on changing business needs, and evaluating
      project status as it relates to time, budget, and scope. We crave constant
      communication and feedback. This cycle is deliberately short to tighten the
      feedback loop, and iterations are typically only one week in length.

      ## the engagement.
      Our minimum engagement is just two weeks, and we operate on a “first
      month’s rent” model - you pay for the first two weeks upfront, and can
      cancel after any iteration without penalties or hurt feelings. To keep
      things sustainable we cap our hours at 40 per week per developer.

      ## the wrap.
      We understand that your priorities, budgets, and needs may change over the
      course of an engagement. If you’re looking to staff up an internal team to
      take over development, we can help you evaluate candidates, hire, and
      transition to that team. Need more or fewer developers? We can easily ramp
      up or down on a per-iteration basis.


  %article.double
    %section
      :markdown
        # services.

    %section
      :markdown
        ## languages.
        working across various programming languages is really just acquainting
        yourself on the language's syntax and its nuances. we approach all
        languages the same. instill the best practices provided by test/behavior
        driven development, understand the core principles provided by design
        patterns and our own experiences. apply those practices to the languages.
        it's really not that complicated. we like to tell the machine what to do
        and how to do it. over the years, we've migrated towards languages we
        feel enable this type of practice. we love to spend our days in ruby,
        html5, css, javascript, objective c, scala, and c/c++. we have extensive
        knowledge in python, java, actionscript, and php. we are constantly
        evaluating tools and assessing the right one for the job at hand.

    %section
      :markdown
        ## frameworks.
        the open source community has created a revolution in programming that
        most people may never understand. it's advanced the progression of
        language and framework development. it's tapped into the collective
        knowledge of millions of developers and progressed our understanding of
        how applications integrate with various frameworks and systems.
        frameworks have made our jobs easier, but understanding the power and
        downfalls of each of these OSS frameworks, requires a developer to look
        under the covers and understand what each of these libraries do. we do
        that. we are constantly evaluating OSS frameworks and how we should apply
        those to the software we are constructing. we tend to lean towards
        frameworks that are tested well, and have proven track records in
        real-world applications. we spend a lot of time in [ruby on
        rails](http://www.rubyonrails.org/), [jQuery](http://www.jquery.org/),
        [sinatra](http://www.sinatrarb.com/),
        [backbone](http://documentcloud.github.com/backbone/),
        [three20](http://three20.info/), [node.js](http://nodejs.org/),
        [ext.js](http://www.sencha.com/products/extjs/) and [sencha
        touch](http://www.sencha.com/products/touch/). we've spent countless
        hours in other libraries such as
        [prototype](http://www.prototypejs.org/),
        [mootools](http://www.mootools.net/),
        [flex](http://www.adobe.com/products/flex),
        [django](http://www.djangoproject.com/),
        [processing](http://www.processing.org/)/[processing.js](http://www.processingjs.org/),
        and even [written a few of our own](https://github.com/modeset). just as
        with languages, we like to provide the right tool for the job at hand.

    %section
      :markdown
        ## infrastructure.
        innovation in languages and frameworks has spurred a similarly momentous
        revolution in infrastructure and deployment stacks. utility computing and
        cloud providers have democratized sophisticated technologies that were
        previously available only to fortune 500 companies with massive
        infrastructure budgets. at the same time, the dizzying array of options
        makes it harder than ever to know that you're getting exactly what you
        need from your infrastructure without overpaying. we understand the
        players in the space, the product offerings, and the tradeoffs inherent
        in a wide variety of deployment architectures. we've built and scaled
        major apps on [rackspace](http://www.rackspace.com/),
        [amazon](http://aws.amazon.com/), and private infrastructures. we've
        integrated with data and cache stores from [mysql](http://www.mysql.com/)
        to [redis](http://redis.io/), [memcached](http://memcached.org/) to
        [oracle](http://www.oracle.com/us/products/database/index.html), and
        we've been doing [devops](http://en.wikipedia.org/wiki/DevOps) since
        before it was a buzzword. in short, we're all about using the right tools
        to build an infrastructure that enables your business - to prime you for
        current and future success without breaking the bank.

